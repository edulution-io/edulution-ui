name: Release Frontend Container

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    permissions:
      contents: write

    outputs:
      docker-tags: ${{ steps.generate_docker_tags.outputs.docker_tags }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/create-github-app-token@v2.1.4
        id: app-token
        with:
          app-id: ${{ vars.VERSION_BUMPER_APPID }}
          private-key: ${{ secrets.VERSION_BUMPER_SECRET }}

      - uses: actions/checkout@v4.2.2
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - id: generate_docker_tags
        run: |
          VERSION=$(node -p "require('./package.json').version")
          docker_registry_path="ghcr.io/edulution-io/edulution-ui"
          docker_tags="$docker_registry_path:v$VERSION,$docker_registry_path:latest"
          echo "docker_tags=$docker_tags" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-24.04
    needs: prepare
    timeout-minutes: 10

    steps:
      - run: echo Use docker tags ${{ needs.prepare.outputs.docker-tags }}

      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          token: ${{ github.token }}

      - name: Use Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 20.x

      - name: Cache Node.js modules
        uses: actions/cache@v4.2.0
        continue-on-error: true
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build Frontend

        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          npm run build

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push docker image
        uses: docker/build-push-action@v6.10.0
        with:
          build-args: |
            buildId=${{ github.sha }}
            version=${{ needs.prepare.outputs.docker-tags }}
          context: .
          file: apps/frontend/Dockerfile
          push: true
          tags: ${{ needs.prepare.outputs.docker-tags }}
